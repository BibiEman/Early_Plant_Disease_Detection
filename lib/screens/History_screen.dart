import 'package:flutter/material.dart';
import 'package:plant_doctor/services/api_service.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:path_provider/path_provider.dart';
import 'dart:io';
import 'package:share_plus/share_plus.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:http/http.dart' as http;
import 'package:flutter/services.dart';

class HistoryScreen extends StatelessWidget {
  const HistoryScreen({super.key});

  Future<void> _generateAndShareReport(BuildContext context, Map<String, dynamic> data) async {
    try {
      // Show loading indicator
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (BuildContext context) {
          return const Center(
            child: Card(
              child: Padding(
                padding: EdgeInsets.all(20.0),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    CircularProgressIndicator(),
                    SizedBox(height: 16),
                    Text('Generating Report...'),
                  ],
                ),
              ),
            ),
          );
        },
      );

      final pdf = pw.Document();
      
      // Get the downloads directory
      final directory = await getExternalStorageDirectory();
      final downloadDir = Directory('${directory?.path}/AgriCare Reports');
      if (!await downloadDir.exists()) {
        await downloadDir.create(recursive: true);
      }

      final imagePath = '${downloadDir.path}/temp_image.jpg';
      
      // Download and save the image locally for PDF
      if (data['image_url'] != null) {
        try {
          final response = await http.get(Uri.parse(data['image_url']));
          await File(imagePath).writeAsBytes(response.bodyBytes);
        } catch (e) {
          print('Error downloading image: $e');
        }
      }

      pdf.addPage(
        pw.Page(
          pageFormat: PdfPageFormat.a4,
          build: (pw.Context context) {
            return pw.Container(
              padding: const pw.EdgeInsets.all(20),
              child: pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  pw.Header(
                    level: 0,
                    child: pw.Row(
                      mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                      children: [
                        pw.Column(
                          crossAxisAlignment: pw.CrossAxisAlignment.start,
                          children: [
                            pw.Text(
                              'Plant Disease Analysis Report',
                              style: pw.TextStyle(
                                fontSize: 24,
                                fontWeight: pw.FontWeight.bold,
                              ),
                            ),
                            pw.SizedBox(height: 8),
                            pw.Text(
                              'Generated by AgriCare AI',
                              style: const pw.TextStyle(
                                fontSize: 14,
                                color: PdfColors.grey700,
                              ),
                            ),
                          ],
                        ),
                        pw.Container(
                          padding: const pw.EdgeInsets.all(10),
                          decoration: pw.BoxDecoration(
                            color: PdfColors.green50,
                            borderRadius: const pw.BorderRadius.all(pw.Radius.circular(8)),
                          ),
                          child: pw.Column(
                            crossAxisAlignment: pw.CrossAxisAlignment.end,
                            children: [
                              pw.Text(
                                'Analysis Date',
                                style: const pw.TextStyle(
                                  color: PdfColors.green800,
                                  fontSize: 10,
                                ),
                              ),
                              pw.SizedBox(height: 4),
                              pw.Text(
                                formatDateTime(DateTime.tryParse(data['timestamp'] ?? '') ?? DateTime.now()),
                                style: const pw.TextStyle(
                                  color: PdfColors.green900,
                                  fontSize: 12,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                  pw.SizedBox(height: 20),
                  if (File(imagePath).existsSync())
                    pw.Container(
                      decoration: pw.BoxDecoration(
                        borderRadius: const pw.BorderRadius.all(pw.Radius.circular(10)),
                        border: pw.Border.all(color: PdfColors.grey300),
                      ),
                      child: pw.ClipRRect(
                        horizontalRadius: 10,
                        verticalRadius: 10,
                        child: pw.Image(
                          pw.MemoryImage(File(imagePath).readAsBytesSync()),
                          height: 200,
                          fit: pw.BoxFit.cover,
                        ),
                      ),
                    ),
                  pw.SizedBox(height: 20),
                  _buildPdfSection('Disease Name', data['disease']?.toString() ?? 'Unknown', PdfColors.red800),
                  _buildPdfSection('Severity', data['severity']?.toString() ?? 'Not specified', PdfColors.orange800),
                  _buildPdfSection('Causes', data['causes']?.toString() ?? 'Not available', PdfColors.brown800),
                  _buildPdfSection('Symptoms', data['symptoms']?.toString() ?? 'Not available', PdfColors.purple800),
                  _buildPdfSection('Treatment', data['treatment']?.toString() ?? 'Not available', PdfColors.green800),
                  _buildPdfSection('Prevention', data['prevention']?.toString() ?? 'Not available', PdfColors.teal800),
                  pw.SizedBox(height: 20),
                  pw.Divider(color: PdfColors.grey300),
                  pw.SizedBox(height: 10),
                  pw.Row(
                    mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                    children: [
                      pw.Text(
                        'AgriCare AI - Plant Disease Analysis',
                        style: const pw.TextStyle(
                          fontSize: 10,
                          color: PdfColors.grey600,
                        ),
                      ),
                      pw.Text(
                        'Page 1/1',
                        style: const pw.TextStyle(
                          fontSize: 10,
                          color: PdfColors.grey600,
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            );
          },
        ),
      );

      // Generate unique filename with timestamp
      final timestamp = formatDateTime(DateTime.now());
      final reportFile = File('${downloadDir.path}/plant_disease_report_$timestamp.pdf');
      await reportFile.writeAsBytes(await pdf.save());

      // Remove the loading dialog
      Navigator.of(context, rootNavigator: true).pop();

      // Show success dialog with options
      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title: const Text('Report Generated'),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text('Report has been saved to:'),
                const SizedBox(height: 8),
                Text(
                  reportFile.path,
                  style: const TextStyle(fontWeight: FontWeight.bold),
                ),
              ],
            ),
            actions: [
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                },
                child: const Text('OK'),
              ),
              ElevatedButton.icon(
                onPressed: () {
                  Share.shareFiles(
                    [reportFile.path],
                    text: 'Plant Disease Analysis Report',
                    subject: 'Disease Analysis: ${data['disease'] ?? 'Unknown Disease'}',
                  );
                },
                icon: const Icon(Icons.share),
                label: const Text('Share'),
              ),
            ],
          );
        },
      );
    } catch (e) {
      // Remove the loading dialog
      Navigator.of(context, rootNavigator: true).pop();
      
      // Show error dialog
      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title: const Text('Error'),
            content: Text('Failed to generate report: $e'),
            actions: [
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                },
                child: const Text('OK'),
              ),
            ],
          );
        },
      );
    }
  }

  static pw.Widget _buildPdfSection(String title, String content, PdfColor color) {
    return pw.Container(
      margin: const pw.EdgeInsets.symmetric(vertical: 8),
      decoration: pw.BoxDecoration(
        color: PdfColor.fromInt(color.toInt() & 0xFFFFFF | (0x33 << 24)),  // 20% opacity
        borderRadius: const pw.BorderRadius.all(pw.Radius.circular(8)),
        border: pw.Border.all(
          color: PdfColor.fromInt(color.toInt() & 0xFFFFFF | (0x80 << 24)),  // 50% opacity
        ),
      ),
      padding: const pw.EdgeInsets.all(12),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            title,
            style: pw.TextStyle(
              fontSize: 16,
              fontWeight: pw.FontWeight.bold,
              color: color,
            ),
          ),
          pw.SizedBox(height: 8),
          pw.Text(
            content,
            style: const pw.TextStyle(
              fontSize: 14,
              lineSpacing: 1.5,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDetailSection(String title, String content, Color color) {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 8),
      decoration: BoxDecoration(
        color: color.withOpacity(0.05),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: color.withOpacity(0.2)),
      ),
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            content,
            style: const TextStyle(
              fontSize: 16,
              height: 1.5,
            ),
          ),
        ],
      ),
    );
  }

  void _showDetailDialog(BuildContext context, Map<String, dynamic> data) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
        ),
        child: DraggableScrollableSheet(
          initialChildSize: 0.9,
          maxChildSize: 0.9,
          minChildSize: 0.5,
          expand: false,
          builder: (context, scrollController) => CustomScrollView(
            controller: scrollController,
            slivers: [
              SliverToBoxAdapter(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Stack(
                      children: [
                        if (data['image_url'] != null)
                          FadeInImage.assetNetwork(
                            placeholder: 'assets/images/placeholder.png',
                            image: data['image_url'],
                            width: double.infinity,
                            height: 250,
                            fit: BoxFit.cover,
                            imageErrorBuilder: (context, error, stackTrace) {
                              return Container(
                                width: double.infinity,
                                height: 250,
                                color: Colors.grey[200],
                                child: const Icon(Icons.image_not_supported, size: 48),
                              );
                            },
                          ),
                        Positioned(
                          top: 20,
                          right: 20,
                          child: ElevatedButton.icon(
                            onPressed: () => _generateAndShareReport(context, data),
                            icon: const Icon(Icons.picture_as_pdf),
                            label: const Text('Generate Report'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.white,
                              foregroundColor: Colors.green,
                            ),
                          ),
                        ),
                      ],
                    ),
                    Padding(
                      padding: const EdgeInsets.all(16),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          if (data['timestamp'] != null)
                            Container(
                              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                              decoration: BoxDecoration(
                                color: Colors.green.shade50,
                                borderRadius: BorderRadius.circular(20),
                              ),
                              child: Text(
                                formatDateTime(DateTime.tryParse(data['timestamp'].toString()) ?? DateTime.now()),
                                style: TextStyle(
                                  color: Colors.green.shade700,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ),
                          const SizedBox(height: 16),
                          _buildDetailSection('Disease', data['disease']?.toString() ?? 'Unknown', Colors.red),
                          _buildDetailSection('Severity', data['severity']?.toString() ?? 'Not specified', Colors.orange),
                          _buildDetailSection('Causes', data['causes']?.toString() ?? 'Not available', Colors.brown),
                          _buildDetailSection('Symptoms', data['symptoms']?.toString() ?? 'Not available', Colors.purple),
                          _buildDetailSection('Treatment', data['treatment']?.toString() ?? 'Not available', Colors.green),
                          _buildDetailSection('Prevention', data['prevention']?.toString() ?? 'Not available', Colors.teal),
                          const SizedBox(height: 24),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          "Analysis History",
          style: TextStyle(fontWeight: FontWeight.bold),
        ),
        elevation: 0,
      ),
      body: FutureBuilder<List<Map<String, dynamic>>>(
        future: ApiService.fetchHistory(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(
              child: CircularProgressIndicator(),
            );
          }
          if (snapshot.hasError) {
            return Center(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    const Icon(Icons.error_outline, size: 48, color: Colors.red),
                    const SizedBox(height: 16),
                    Text(
                      'Error: ${snapshot.error}',
                      textAlign: TextAlign.center,
                      style: const TextStyle(color: Colors.red),
                    ),
                  ],
                ),
              ),
            );
          }
          if (!snapshot.hasData || snapshot.data!.isEmpty) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.history, size: 64, color: Colors.grey[400]),
                  const SizedBox(height: 16),
                  Text(
                    'No analysis history available',
                    style: TextStyle(
                      fontSize: 16,
                      color: Colors.grey[600],
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ],
              ),
            );
          }

          final history = snapshot.data!;
          return ListView.builder(
            itemCount: history.length,
            padding: const EdgeInsets.all(12),
            itemBuilder: (context, index) {
              final item = history[index];
              return Card(
                elevation: 2,
                margin: const EdgeInsets.symmetric(vertical: 6, horizontal: 2),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
                child: InkWell(
                  onTap: () => _showDetailDialog(context, item),
                  borderRadius: BorderRadius.circular(12),
                  child: Padding(
                    padding: const EdgeInsets.all(12),
                    child: Row(
                      children: [
                        if (item['image_url'] != null)
                          ClipRRect(
                            borderRadius: BorderRadius.circular(10),
                            child: Image.network(
                              item['image_url'],
                              width: 80,
                              height: 80,
                              fit: BoxFit.cover,
                              loadingBuilder: (context, child, loadingProgress) {
                                if (loadingProgress == null) return child;
                                return Container(
                                  width: 80,
                                  height: 80,
                                  color: Colors.grey[200],
                                  child: Center(
                                    child: CircularProgressIndicator(
                                      value: loadingProgress.expectedTotalBytes != null
                                          ? loadingProgress.cumulativeBytesLoaded /
                                              loadingProgress.expectedTotalBytes!
                                          : null,
                                    ),
                                  ),
                                );
                              },
                              errorBuilder: (context, error, stackTrace) {
                                return Container(
                                  width: 80,
                                  height: 80,
                                  color: Colors.grey[200],
                                  child: const Icon(Icons.image_not_supported, size: 30),
                                );
                              },
                            ),
                          ),
                        const SizedBox(width: 16),
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                item['disease']?.toString() ?? 'Unknown Disease',
                                style: const TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              const SizedBox(height: 4),
                              Text(
                                'Severity: ${item['severity']?.toString() ?? 'Not specified'}',
                                style: TextStyle(
                                  color: Colors.grey[600],
                                  fontSize: 14,
                                ),
                              ),
                              const SizedBox(height: 4),
                              if (item['timestamp'] != null)
                                Text(
                                  formatDateTime(DateTime.tryParse(item['timestamp'].toString()) ?? DateTime.now()),
                                  style: TextStyle(
                                    color: Colors.grey[500],
                                    fontSize: 12,
                                  ),
                                ),
                            ],
                          ),
                        ),
                        Icon(Icons.arrow_forward_ios, size: 16, color: Colors.grey[400]),
                      ],
                    ),
                  ),
                ),
              );
            },
          );
        },
      ),
    );
  }
}

String formatDateTime(DateTime dateTime) {
  String pad(int n) => n.toString().padLeft(2, '0');
  return '${dateTime.year}-${pad(dateTime.month)}-${pad(dateTime.day)} ${pad(dateTime.hour)}:${pad(dateTime.minute)}';
}
